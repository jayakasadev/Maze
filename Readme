Output is in the output directory.
The solution using Astar search is in the solution.txt file.
The solution using BFS to verify the AStar search is in bfssearch.txt

##Built Using Java 8##

Compiling Code in src Folder:
From the Maze Directory:
##Make sure the data, notes, src, test directories are visible in current path##

    javac src/Maze/*.java src/Util/*.java
    java -cp "src" Maze.Maze

Output:

Solving maze_No_1.txt
Path for current maze took 125 moves.
[ (1, 1) (2, 1) (3, 1) (4, 1) (5, 1) (6, 1) (7, 1) (8, 1) (9, 1) (9, 2) (10, 2) (11, 2) (12, 2) (13, 2) (14, 2) (15, 2) (16, 2) (17, 2) (18, 2) (19, 2) (19, 3) (20, 3) (21, 3) (22, 3) (23, 3) (24, 3) (25, 3) (26, 3) (27, 3) (28, 3) (29, 3) (30, 3) (31, 3) (31, 4) (32, 4) (33, 4) (34, 4) (35, 4) (36, 4) (37, 4) (38, 4) (39, 4) (40, 4) (41, 4) (41, 5) (42, 5) (43, 5) (44, 5) (45, 5) (46, 5) (47, 5) (48, 5) (48, 6) (49, 6) (50, 6) (51, 6) (52, 6) (53, 6) (54, 6) (55, 6) (56, 6) (57, 6) (58, 6) (59, 6) (59, 7) (60, 7) (60, 8) (61, 8) (62, 8) (63, 8) (64, 8) (65, 8) (66, 8) (67, 8) (68, 8) (69, 8) (70, 8) (70, 9) (70, 10) (70, 11) (71, 11) (71, 12) (71, 13) (71, 14) (71, 15) (71, 16) (71, 17) (71, 18) (71, 19) (72, 19) (72, 20) (72, 21) (73, 21) (73, 22) (73, 23) (73, 24) (74, 24) (74, 25) (74, 26) (74, 27) (74, 28) (74, 29) (75, 29) (75, 30) (76, 30) (77, 30) (77, 31) (77, 32) (77, 33) (77, 34) (77, 35) (77, 36) (77, 37) (77, 38) (77, 39) (77, 40) (77, 41) (77, 42) (78, 42) (78, 43) (78, 44) (78, 45) (79, 45) (79, 46) (79, 47) (78, 47) ]
Solving maze_No_2.txt
Path for current maze took 198 moves.
[ (101, 101) (100, 101) (99, 101) (98, 101) (98, 100) (97, 100) (96, 100) (95, 100) (94, 100) (93, 100) (92, 100) (91, 100) (90, 100) (89, 100) (89, 99) (88, 99) (87, 99) (87, 98) (86, 98) (85, 98) (84, 98) (83, 98) (82, 98) (81, 98) (80, 98) (79, 98) (79, 97) (78, 97) (78, 96) (77, 96) (76, 96) (75, 96) (74, 96) (73, 96) (73, 95) (73, 94) (72, 94) (72, 93) (71, 93) (70, 93) (69, 93) (69, 92) (68, 92) (67, 92) (66, 92) (65, 92) (64, 92) (63, 92) (63, 91) (63, 90) (62, 90) (61, 90) (60, 90) (59, 90) (58, 90) (58, 89) (57, 89) (56, 89) (55, 89) (54, 89) (53, 89) (52, 89) (51, 89) (50, 89) (49, 89) (48, 89) (47, 89) (46, 89) (45, 89) (44, 89) (43, 89) (42, 89) (41, 89) (41, 88) (41, 87) (40, 87) (40, 86) (40, 85) (39, 85) (39, 84) (38, 84) (37, 84) (36, 84) (36, 83) (35, 83) (34, 83) (33, 83) (32, 83) (32, 82) (32, 81) (32, 80) (31, 80) (31, 79) (30, 79) (29, 79) (29, 78) (29, 77) (29, 76) (29, 75) (28, 75) (28, 74) (28, 73) (28, 72) (28, 71) (27, 71) (27, 70) (27, 69) (26, 69) (26, 68) (26, 67) (26, 66) (26, 65) (26, 64) (26, 63) (26, 62) (26, 61) (26, 60) (26, 59) (25, 59) (24, 59) (23, 59) (23, 58) (22, 58) (22, 57) (22, 56) (22, 55) (21, 55) (20, 55) (20, 54) (20, 53) (20, 52) (19, 52) (18, 52) (17, 52) (17, 51) (17, 50) (17, 49) (16, 49) (16, 48) (16, 47) (16, 46) (16, 45) (16, 44) (16, 43) (16, 42) (16, 41) (16, 40) (16, 39) (16, 38) (16, 37) (15, 37) (15, 36) (15, 35) (15, 34) (15, 33) (15, 32) (15, 31) (15, 30) (15, 29) (15, 28) (15, 27) (15, 26) (15, 25) (15, 24) (15, 23) (15, 22) (15, 21) (15, 20) (15, 19) (14, 19) (14, 18) (13, 18) (12, 18) (11, 18) (10, 18) (10, 17) (9, 17) (9, 16) (9, 15) (9, 14) (9, 13) (8, 13) (8, 12) (7, 12) (7, 11) (7, 10) (6, 10) (6, 9) (6, 8) (6, 7) (5, 7) (5, 6) (4, 6) (4, 5) (4, 4) (3, 4) (2, 4) (2, 5) (2, 6) ]

Compiling the Code in Test Folder:
From the Maze Directory:
##Make sure the data, notes, src, test directories are visible in current path##

javac test/BFS/*.java test/Util/*.java
java -cp "test" BFS.MazeShortestPath

Output:

Solving maze_No_1.txt
Last visited node was(101, 101)
Calculated Shortest path takes 125 steps.
[ (1, 1) (2, 1) (3, 1) (4, 1) (5, 1) (6, 1) (7, 1) (8, 1) (9, 1) (9, 2) (10, 2) (11, 2) (12, 2) (13, 2) (14, 2) (15, 2) (16, 2) (17, 2) (18, 2) (19, 2) (19, 3) (20, 3) (21, 3) (22, 3) (23, 3) (24, 3) (25, 3) (26, 3) (27, 3) (28, 3) (29, 3) (30, 3) (31, 3) (31, 4) (32, 4) (33, 4) (34, 4) (35, 4) (36, 4) (37, 4) (38, 4) (39, 4) (40, 4) (41, 4) (41, 5) (42, 5) (43, 5) (44, 5) (45, 5) (46, 5) (47, 5) (48, 5) (48, 6) (49, 6) (50, 6) (51, 6) (52, 6) (53, 6) (54, 6) (55, 6) (56, 6) (57, 6) (58, 6) (59, 6) (59, 7) (60, 7) (60, 8) (61, 8) (62, 8) (63, 8) (64, 8) (65, 8) (66, 8) (67, 8) (68, 8) (69, 8) (70, 8) (70, 9) (70, 10) (70, 11) (71, 11) (71, 12) (71, 13) (71, 14) (71, 15) (71, 16) (71, 17) (71, 18) (71, 19) (72, 19) (72, 20) (72, 21) (73, 21) (73, 22) (73, 23) (73, 24) (74, 24) (74, 25) (74, 26) (74, 27) (74, 28) (74, 29) (75, 29) (75, 30) (76, 30) (77, 30) (77, 31) (77, 32) (77, 33) (77, 34) (77, 35) (77, 36) (77, 37) (77, 38) (77, 39) (77, 40) (77, 41) (77, 42) (78, 42) (78, 43) (78, 44) (78, 45) (79, 45) (79, 46) (79, 47) (78, 47)  ]
Solving maze_No_2.txt
Last visited node was(101, 4)
Calculated Shortest path takes 148 steps.
[ (1, 53) (2, 53) (3, 53) (3, 54) (4, 54) (5, 54) (6, 54) (7, 54) (8, 54) (9, 54) (10, 54) (11, 54) (12, 54) (13, 54) (14, 54) (15, 54) (15, 55) (15, 56) (15, 57) (15, 58) (15, 59) (16, 59) (17, 59) (18, 59) (19, 59) (20, 59) (21, 59) (21, 60) (21, 61) (21, 62) (21, 63) (22, 63) (23, 63) (24, 63) (25, 63) (26, 63) (27, 63) (28, 63) (29, 63) (30, 63) (31, 63) (32, 63) (33, 63) (34, 63) (35, 63) (36, 63) (37, 63) (38, 63) (39, 63) (40, 63) (41, 63) (42, 63) (43, 63) (43, 64) (43, 65) (43, 66) (44, 66) (45, 66) (46, 66) (47, 66) (48, 66) (49, 66) (50, 66) (51, 66) (52, 66) (53, 66) (54, 66) (55, 66) (56, 66) (57, 66) (58, 66) (59, 66) (60, 66) (61, 66) (61, 67) (61, 68) (61, 69) (62, 69) (63, 69) (64, 69) (65, 69) (66, 69) (66, 70) (67, 70) (68, 70) (69, 70) (70, 70) (71, 70) (72, 70) (73, 70) (74, 70) (75, 70) (76, 70) (77, 70) (78, 70) (79, 70) (80, 70) (81, 70) (82, 70) (83, 70) (84, 70) (85, 70) (86, 70) (86, 71) (87, 71) (88, 71) (89, 71) (89, 72) (90, 72) (91, 72) (92, 72) (93, 72) (94, 72) (95, 72) (96, 72) (96, 73) (96, 74) (96, 75) (96, 76) (97, 76) (98, 76) (98, 77) (98, 78) (98, 79) (98, 80) (98, 81) (98, 82) (98, 83) (98, 84) (98, 85) (98, 86) (98, 87) (98, 88) (98, 89) (98, 90) (98, 91) (99, 91) (99, 92) (99, 93) (99, 94) (99, 95) (99, 96) (99, 97) (99, 98) (99, 99) (99, 100) (99, 101) (100, 101) (101, 101)  ]


Unfortunately, there is a bug in the BFS code which prevents me from searching from (101, 101) to (1, 53).
However, it works just fine in the other direction.

As the code shows, my Astar search was not always optimal at finding the shortest path.
Although it could find the shortest path for the first maze, it was 50 steps slower in the 2nd maze.
However, on average, it was pretty accurate at finding the shortest path.
To test this, you can uncomment the code in the main method of the Maze class, run the code, do the same with the main method in MazeShortestPath class and then compare the results.
On average, Astar search was pretty good at finding the shortest path.