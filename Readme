Output is in the output directory.
The solution using Astar search is in the solution.txt file.
The solution using BFS to verify the AStar search is in bfssearch.txt

Compiling Code in src Folder:
From the Maze Directory:
##Make sure the data, notes, src, test directories are visible in current path##

    javac src/Maze/*.java src/Util/*.java
    java -cp "src" Maze.Maze

Output:

Solving maze_No_1.txt
Path for current maze took 200 moves.
[ (1, 1) (2, 1) (3, 1) (4, 1) (5, 1) (6, 1) (7, 1) (8, 1) (9, 1) (9, 2) (10, 2) (11, 2) (12, 2) (13, 2) (14, 2) (15, 2) (16, 2) (17, 2) (18, 2) (19, 2) (19, 3) (20, 3) (21, 3) (22, 3) (23, 3) (24, 3) (25, 3) (26, 3) (27, 3) (28, 3) (29, 3) (30, 3) (31, 3) (31, 4) (32, 4) (33, 4) (34, 4) (35, 4) (36, 4) (37, 4) (38, 4) (39, 4) (40, 4) (41, 4) (41, 5) (42, 5) (43, 5) (44, 5) (45, 5) (46, 5) (47, 5) (48, 5) (48, 6) (49, 6) (50, 6) (51, 6) (52, 6) (53, 6) (54, 6) (55, 6) (56, 6) (57, 6) (58, 6) (59, 6) (59, 7) (60, 7) (60, 8) (61, 8) (62, 8) (63, 8) (64, 8) (65, 8) (66, 8) (67, 8) (68, 8) (69, 8) (70, 8) (71, 8) (72, 8) (73, 8) (74, 8) (74, 9) (75, 9) (76, 9) (77, 9) (78, 9) (78, 10) (79, 10) (79, 11) (79, 12) (79, 13) (80, 13) (81, 13) (82, 13) (83, 13) (84, 13) (85, 13) (86, 13) (87, 13) (88, 13) (89, 13) (90, 13) (90, 14) (90, 15) (90, 16) (90, 17) (90, 18) (90, 19) (90, 20) (90, 21) (90, 22) (90, 23) (90, 24) (90, 25) (91, 25) (91, 26) (91, 27) (91, 28) (92, 28) (92, 29) (93, 29) (93, 30) (93, 31) (94, 31) (95, 31) (95, 32) (95, 33) (95, 34) (95, 35) (95, 36) (95, 37) (95, 38) (95, 39) (95, 40) (95, 41) (95, 42) (95, 43) (95, 44) (95, 45) (95, 46) (95, 47) (95, 48) (95, 49) (95, 50) (95, 51) (95, 52) (95, 53) (95, 54) (95, 55) (95, 56) (95, 57) (95, 58) (95, 59) (95, 60) (95, 61) (95, 62) (95, 63) (95, 64) (95, 65) (95, 66) (95, 67) (95, 68) (96, 68) (97, 68) (97, 69) (97, 70) (97, 71) (97, 72) (97, 73) (97, 74) (97, 75) (97, 76) (97, 77) (97, 78) (97, 79) (97, 80) (97, 81) (97, 82) (97, 83) (97, 84) (97, 85) (97, 86) (97, 87) (98, 87) (99, 87) (99, 88) (99, 89) (99, 90) (99, 91) (100, 91) (100, 92) (100, 93) (100, 94) (100, 95) (100, 96) (100, 97) (100, 98) (101, 98) (101, 99) (101, 100) (101, 101) ]
Solving maze_No_2.txt
Path for current maze took 200 moves.
[ (1, 1) (2, 1) (2, 2) (3, 2) (4, 2) (5, 2) (6, 2) (6, 3) (7, 3) (7, 4) (8, 4) (9, 4) (9, 5) (10, 5) (11, 5) (11, 6) (12, 6) (13, 6) (14, 6) (15, 6) (16, 6) (17, 6) (18, 6) (19, 6) (20, 6) (21, 6) (22, 6) (23, 6) (23, 7) (23, 8) (23, 9) (24, 9) (25, 9) (26, 9) (27, 9) (28, 9) (29, 9) (30, 9) (31, 9) (32, 9) (33, 9) (34, 9) (35, 9) (36, 9) (36, 10) (37, 10) (38, 10) (39, 10) (40, 10) (41, 10) (42, 10) (43, 10) (43, 11) (44, 11) (45, 11) (46, 11) (47, 11) (47, 12) (47, 13) (48, 13) (48, 14) (49, 14) (50, 14) (51, 14) (52, 14) (53, 14) (54, 14) (55, 14) (56, 14) (57, 14) (58, 14) (59, 14) (60, 14) (61, 14) (62, 14) (62, 15) (62, 16) (63, 16) (63, 17) (64, 17) (65, 17) (66, 17) (67, 17) (68, 17) (69, 17) (70, 17) (71, 17) (72, 17) (73, 17) (74, 17) (75, 17) (76, 17) (77, 17) (78, 17) (79, 17) (80, 17) (81, 17) (82, 17) (83, 17) (83, 18) (83, 19) (83, 20) (83, 21) (83, 22) (83, 23) (83, 24) (83, 25) (83, 26) (84, 26) (85, 26) (85, 27) (85, 28) (85, 29) (85, 30) (85, 31) (86, 31) (86, 32) (86, 33) (86, 34) (86, 35) (86, 36) (86, 37) (86, 38) (87, 38) (87, 39) (87, 40) (87, 41) (87, 42) (87, 43) (87, 44) (87, 45) (87, 46) (87, 47) (88, 47) (88, 48) (89, 48) (89, 49) (89, 50) (89, 51) (89, 52) (90, 52) (90, 53) (90, 54) (90, 55) (91, 55) (92, 55) (92, 56) (93, 56) (93, 57) (93, 58) (94, 58) (94, 59) (94, 60) (94, 61) (94, 62) (94, 63) (94, 64) (94, 65) (95, 65) (95, 66) (96, 66) (96, 67) (96, 68) (96, 69) (96, 70) (96, 71) (96, 72) (96, 73) (96, 74) (96, 75) (96, 76) (97, 76) (98, 76) (98, 77) (98, 78) (98, 79) (98, 80) (98, 81) (98, 82) (98, 83) (98, 84) (98, 85) (98, 86) (98, 87) (98, 88) (98, 89) (98, 90) (98, 91) (99, 91) (99, 92) (99, 93) (99, 94) (99, 95) (99, 96) (99, 97) (99, 98) (99, 99) (99, 100) (99, 101) (100, 101) (101, 101) ]



Compiling the Code in Test Folder:
From the Maze Directory:
##Make sure the data, notes, src, test directories are visible in current path##

javac test/BFS/*.java test/Util/*.java
java -cp "test" BFS.MazeShortestPath

Output:

Solving maze_No_1.txt
Calculated Shortest path takes 200 steps.
[ (1, 1) (2, 1) (3, 1) (4, 1) (5, 1) (6, 1) (7, 1) (8, 1) (9, 1) (9, 2) (10, 2) (11, 2) (12, 2) (13, 2) (14, 2) (15, 2) (16, 2) (17, 2) (18, 2) (19, 2) (19, 3) (20, 3) (21, 3) (22, 3) (23, 3) (24, 3) (25, 3) (26, 3) (27, 3) (28, 3) (29, 3) (30, 3) (31, 3) (31, 4) (32, 4) (33, 4) (34, 4) (35, 4) (36, 4) (37, 4) (38, 4) (39, 4) (40, 4) (41, 4) (41, 5) (42, 5) (43, 5) (44, 5) (45, 5) (46, 5) (47, 5) (48, 5) (48, 6) (49, 6) (50, 6) (51, 6) (52, 6) (53, 6) (54, 6) (55, 6) (56, 6) (57, 6) (58, 6) (59, 6) (59, 7) (60, 7) (60, 8) (61, 8) (62, 8) (63, 8) (64, 8) (65, 8) (66, 8) (67, 8) (68, 8) (69, 8) (70, 8) (71, 8) (72, 8) (73, 8) (74, 8) (74, 9) (75, 9) (76, 9) (77, 9) (78, 9) (78, 10) (79, 10) (79, 11) (79, 12) (79, 13) (80, 13) (81, 13) (82, 13) (83, 13) (84, 13) (85, 13) (86, 13) (87, 13) (88, 13) (89, 13) (90, 13) (90, 14) (90, 15) (90, 16) (90, 17) (90, 18) (90, 19) (90, 20) (90, 21) (90, 22) (90, 23) (90, 24) (90, 25) (91, 25) (91, 26) (91, 27) (91, 28) (92, 28) (92, 29) (93, 29) (93, 30) (93, 31) (94, 31) (95, 31) (95, 32) (95, 33) (95, 34) (95, 35) (95, 36) (95, 37) (95, 38) (95, 39) (95, 40) (95, 41) (95, 42) (95, 43) (95, 44) (95, 45) (95, 46) (95, 47) (95, 48) (95, 49) (95, 50) (95, 51) (95, 52) (95, 53) (95, 54) (95, 55) (95, 56) (95, 57) (95, 58) (95, 59) (95, 60) (95, 61) (95, 62) (95, 63) (95, 64) (95, 65) (95, 66) (95, 67) (95, 68) (96, 68) (97, 68) (97, 69) (97, 70) (97, 71) (97, 72) (97, 73) (97, 74) (97, 75) (97, 76) (97, 77) (97, 78) (97, 79) (97, 80) (97, 81) (97, 82) (97, 83) (97, 84) (97, 85) (97, 86) (97, 87) (98, 87) (99, 87) (99, 88) (99, 89) (99, 90) (99, 91) (100, 91) (100, 92) (100, 93) (100, 94) (100, 95) (100, 96) (100, 97) (100, 98) (101, 98) (101, 99) (101, 100) (101, 101)  ]
Solving maze_No_2.txt
Calculated Shortest path takes 200 steps.
[ (1, 1) (2, 1) (2, 2) (3, 2) (4, 2) (5, 2) (6, 2) (6, 3) (7, 3) (7, 4) (8, 4) (9, 4) (9, 5) (10, 5) (11, 5) (11, 6) (12, 6) (13, 6) (14, 6) (15, 6) (16, 6) (17, 6) (18, 6) (19, 6) (20, 6) (21, 6) (22, 6) (23, 6) (23, 7) (23, 8) (23, 9) (24, 9) (25, 9) (26, 9) (27, 9) (28, 9) (29, 9) (30, 9) (31, 9) (32, 9) (33, 9) (34, 9) (35, 9) (36, 9) (36, 10) (37, 10) (38, 10) (39, 10) (40, 10) (41, 10) (42, 10) (43, 10) (43, 11) (44, 11) (45, 11) (46, 11) (47, 11) (47, 12) (47, 13) (48, 13) (48, 14) (49, 14) (50, 14) (51, 14) (52, 14) (53, 14) (54, 14) (55, 14) (56, 14) (57, 14) (58, 14) (59, 14) (60, 14) (61, 14) (62, 14) (62, 15) (62, 16) (63, 16) (63, 17) (64, 17) (65, 17) (66, 17) (67, 17) (68, 17) (69, 17) (70, 17) (71, 17) (72, 17) (73, 17) (74, 17) (75, 17) (76, 17) (77, 17) (78, 17) (79, 17) (80, 17) (81, 17) (82, 17) (83, 17) (83, 18) (83, 19) (83, 20) (83, 21) (83, 22) (83, 23) (83, 24) (83, 25) (83, 26) (84, 26) (85, 26) (85, 27) (85, 28) (85, 29) (85, 30) (85, 31) (86, 31) (86, 32) (86, 33) (86, 34) (86, 35) (86, 36) (86, 37) (86, 38) (87, 38) (87, 39) (87, 40) (87, 41) (87, 42) (87, 43) (87, 44) (87, 45) (87, 46) (87, 47) (88, 47) (88, 48) (89, 48) (89, 49) (89, 50) (89, 51) (89, 52) (90, 52) (90, 53) (90, 54) (90, 55) (91, 55) (92, 55) (92, 56) (93, 56) (93, 57) (93, 58) (94, 58) (94, 59) (94, 60) (94, 61) (94, 62) (94, 63) (94, 64) (94, 65) (95, 65) (95, 66) (96, 66) (96, 67) (96, 68) (96, 69) (96, 70) (96, 71) (96, 72) (96, 73) (96, 74) (96, 75) (96, 76) (97, 76) (98, 76) (98, 77) (98, 78) (98, 79) (98, 80) (98, 81) (98, 82) (98, 83) (98, 84) (98, 85) (98, 86) (98, 87) (98, 88) (98, 89) (98, 90) (98, 91) (99, 91) (99, 92) (99, 93) (99, 94) (99, 95) (99, 96) (99, 97) (99, 98) (99, 99) (99, 100) (99, 101) (100, 101) (101, 101)  ]